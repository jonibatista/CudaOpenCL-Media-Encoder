.TH "main.c" 3 "Fri Nov 25 2011" "Version v1.0.0" "Cuda Codificador" \" -*- nroff -*-
.ad l
.nh
.SH NAME
main.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio.h>\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include <math.h>\fP
.br
\fC#include <float.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <unistd.h>\fP
.br
\fC#include <ctype.h>\fP
.br
\fC#include <time.h>\fP
.br
\fC#include <sys/types.h>\fP
.br
\fC#include <sys/stat.h>\fP
.br
\fC#include <fcntl.h>\fP
.br
\fC#include 'params.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBERROR_INVALID_PARAMETERS\fP   1"
.br
.RI "\fI*/ \fP"
.ti -1c
.RI "#define \fBERROR_ALLOCATE_MEMORY\fP   2"
.br
.ti -1c
.RI "#define \fBERROR_OPEN_FILE\fP"
.br
.ti -1c
.RI "#define \fBERROR_INVALID_PARAMETERS\fP   1"
.br
.RI "\fI*/ \fP"
.ti -1c
.RI "#define \fBRANGE_LUMINANCE\fP   255"
.br
.RI "\fI******************* END CONSTANTES ERROR DEFINITION **********************/// \fP"
.ti -1c
.RI "#define \fBPERMS\fP   0644"
.br
.ti -1c
.RI "#define \fBRANGEY\fP   255"
.br
.ti -1c
.RI "#define \fBClip1\fP(a)   ((a)>255?255:((a)<0?0:(a)))"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBread_header_pgm\fP (int *ysize, int *xsize, char *file_name)"
.br
.RI "\fI************************ END CONSTANTES DEFINITION ***********************/// \fP"
.ti -1c
.RI "void \fBread_file_pgm\fP (int **pelimg, int *ysize, int *xsize, char *file_name)"
.br
.ti -1c
.RI "void \fBv_read_file_pgm\fP (int *pelimg, int *ysize, int *xsize, char *file_name)"
.br
.ti -1c
.RI "int ** \fBint_matrix\fP (int nr, int nc)"
.br
.ti -1c
.RI "float ** \fBfloatmatrix\fP (int nr, int nc)"
.br
.ti -1c
.RI "int * \fBint_vector\fP (int nr, int nc)"
.br
.ti -1c
.RI "float \fBquad_err\fP (int index_dic, int *block_size_x, int *block_size_y, int *original_block)"
.br
.ti -1c
.RI "void \fBload_dictionary\fP (char *file_name, int *num_codewords, int *block_size_x, int *block_size_y)"
.br
.ti -1c
.RI "double \fBcalculate_psnr\fP (int **origblk, int **cmpblk, int nline, int npixel)"
.br
.ti -1c
.RI "double \fBcalculate_mse\fP (int **origblk, int **cmpblk, int nline, int npixel)"
.br
.ti -1c
.RI "void \fBwrite_index\fP (int index, int bits_index, long *bits_count, int *bits_to_go, int *buffer, FILE *pointf_out)"
.br
.ti -1c
.RI "void \fBwrite_f_pgm\fP (int **im_matrix, int nline, int npixel, char *filename)"
.br
.ti -1c
.RI "unsigned char ** \fBucmatrix\fP (int nrl, int nrh, int ncl, int nch)"
.br
.ti -1c
.RI "void \fBoutput_bit\fP (int bit, FILE *output_file, int *buffer, int *bits_to_go, long *bits_count)"
.br
.ti -1c
.RI "void \fBdone_outputing_bits\fP (FILE *output_file, int *buffer, int *bits_to_go)"
.br
.ti -1c
.RI "int \fBmain\fP (int argc, char *argv[])"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "GLOBAL VARIABLES **************************************************************************int \fBG_dic\fP"
.br
.RI "\fIEND PROTOTYPES DEFINITION ///. \fP"
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define Clip1(a)   ((a)>255?255:((a)<0?0:(a)))"
.SS "#define ERROR_ALLOCATE_MEMORY   2"
.SS "#define ERROR_INVALID_PARAMETERS   1"
.PP
*/ 
.SS "#define ERROR_INVALID_PARAMETERS   1"
.PP
*/ 
.SS "#define ERROR_OPEN_FILE"
.SS "#define PERMS   0644"
.SS "#define RANGE_LUMINANCE   255"
.PP
******************* END CONSTANTES ERROR DEFINITION **********************/// */ 
.SS "#define RANGEY   255"
.SH "Function Documentation"
.PP 
.SS "double calculate_mse (int **origblk, int **cmpblk, intnline, intnpixel)"
.SS "double calculate_psnr (int **origblk, int **cmpblk, intnline, intnpixel)"
.SS "void done_outputing_bits (FILE *output_file, int *buffer, int *bits_to_go)"
.SS "float ** floatmatrix (intnr, intnc)"Allocates memory for a matrix of variables of type float. 
.PP
\fBParameters:\fP
.RS 4
\fInr\fP number of rows 
.br
\fInc\fP number of columns 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to a int matrix (float **) 
.RE
.PP

.SS "int ** int_matrix (intnr, intnc)"Allocates memory for a matrix of variables of type int. 
.PP
\fBParameters:\fP
.RS 4
\fInr\fP number of rows 
.br
\fInc\fP number of columns 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to a int matrix (int **) 
.RE
.PP

.SS "int * int_vector (intnr, intnc)"Allocates memory for a vector of variables of type int. 
.PP
\fBParameters:\fP
.RS 4
\fInr\fP number of rows 
.br
\fInc\fP number of columns 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to a int vector (int *) 
.RE
.PP

.SS "void load_dictionary (char *file_name, int *num_codewords, int *block_size_x, int *block_size_y)"Load the dictionary file to memory. 
.PP
\fBParameters:\fP
.RS 4
\fIfile_name\fP the name of the dictionary file 
.br
\fInum_codewords\fP number of blocks of the dictionary 
.br
\fIblock_size_x\fP horizontal size of the block 
.br
\fIblock_size_y\fP vertical size of the block 
.RE
.PP

.SS "int main (intargc, char *argv[])"
.SS "void output_bit (intbit, FILE *output_file, int *buffer, int *bits_to_go, long *bits_count)"
.SS "float quad_err (intindex_dic, int *block_size_x, int *block_size_y, int *original_block)"Calculate the square error between a vector and a training set of the codebook vector. 
.PP
\fBParameters:\fP
.RS 4
\fIindex_dic\fP index of the dictionary row 
.br
\fIblock_size_x\fP horizontal size of the block 
.br
\fIblock_size_y\fP vertical size of the block 
.br
\fIoriginal_block\fP the current block 
.RE
.PP
\fBReturns:\fP
.RS 4
the square error value 
.RE
.PP

.SS "void read_file_pgm (int **pelimg, int *ysize, int *xsize, char *file_name)"Copy the image to memory 
.PP
\fBParameters:\fP
.RS 4
\fIpelimg\fP vector where the image will be saved 
.br
\fIysize\fP image vertical dimension 
.br
\fIxsize\fP image horizontal dimensio 
.br
\fIfile_name\fP file name of the image that will be coded 
.RE
.PP

.SS "void read_header_pgm (int *ysize, int *xsize, char *file_name)"
.PP
************************ END CONSTANTES DEFINITION ***********************/// PROTOTYPES DEFINITION ///
.PP
Reads the information of a pgm file to calculate the horizontal and vertical size.
.PP
\fBParameters:\fP
.RS 4
\fIysize\fP image vertical dimension 
.br
\fIxsize\fP image horizontal dimensio 
.br
\fIfile_name\fP file name of the image that will be coded 
.RE
.PP

.SS "unsigned char ** ucmatrix (intnrl, intnrh, intncl, intnch)"
.SS "void v_read_file_pgm (int *pelimg, int *ysize, int *xsize, char *file_name)"Copy the image to memory 
.PP
\fBParameters:\fP
.RS 4
\fIpelimg\fP vector where the image will be saved 
.br
\fIysize\fP image vertical dimension 
.br
\fIxsize\fP image horizontal dimensio 
.br
\fIfile_name\fP file name of the image that will be coded 
.RE
.PP

.SS "void write_f_pgm (int **im_matrix, intnline, intnpixel, char *filename)"
.SS "void write_index (intindex, intbits_index, long *bits_count, int *bits_to_go, int *buffer, FILE *pointf_out)"
.SH "Variable Documentation"
.PP 
.SS "GLOBAL VARIABLES************************************************************************** int \fBG_dic\fP"
.PP
END PROTOTYPES DEFINITION ///. */ 
.SH "Author"
.PP 
Generated automatically by Doxygen for Cuda Codificador from the source code.
