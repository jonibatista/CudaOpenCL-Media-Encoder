#!/bin/bash

#die () {
#    echo >&2 "$@"
#    exit 1
#}

EX_UNKNOWN=1

warning()
{
    # Output warning messages
    # Color the output red if it's an interactive terminal
    # @param $1...: Messages

    test -t 1 && tput setf 4

    printf '%s\n' "$@" >&2

    test -t 1 && tput sgr0 # Reset terminal
    true
}

error()
{
    # Output error messages with optional exit code
    # @param $1...: Messages
    # @param $N: Exit code (optional)

    messages=( "$@" )

    # If the last parameter is a number, it's not part of the messages
    last_parameter="${messages[@]: -1}"
    if [[ "$last_parameter" =~ ^[0-9]*$ ]]
    then
        exit_code=$last_parameter
        unset messages[$((${#messages[@]} - 1))]
    fi

    warning "${messages[@]}"

    exit ${exit_code:-$EX_UNKNOWN}
}

cd _Codificador/

if [ -z "$1" ] || [ -z "$2" ]; then
	a=true
fi

if [ -z "$a" ]; then
	echo $1 | grep -E -q '^[0-9]+$' || error "Numeric argument required, $1 provided"
	echo $2 | grep -E -q '^[0-9]+$' || error "Numeric argument required, $2 provided"


	# meta programming

	# main.c
	new_line_block="const int G_BlocksPerGrid = "$1";"
	new_line_threads="const int G_ThreadsPerBlock = "$2";"
	
	perl -pe "s/.*/$new_line_block/ if $. == 117" < main.c > main.c_temp #>/dev/null 2>&1
	mv main.c_temp main.c
	echo -e "Blocks defined: $1";

	perl -pe "s/.*/$new_line_threads/ if $. == 118" < main.c > main.c_temp #>/dev/null 2>&1
	mv main.c_temp main.c
	echo -e "Threads defined: $2";


	#kernel
	new_line_block="#define G_BlocksPerGrid  "$1
	new_line_threads="#define G_ThreadsPerBlock "$2
	#cd _Codificador/
	perl -pe "s/.*/$new_line_block/ if $. == 1" < quadratic_kernel.cl > temp_quadratic_kernel.cl #>/dev/null 2>&1
	mv temp_quadratic_kernel.cl quadratic_kernel.cl
	#echo -e "Blocks defined: $1";

	perl -pe "s/.*/$new_line_threads/ if $. == 2" < quadratic_kernel.cl >temp_quadratic_kernel.cl #>/dev/null 2>&1
	mv temp_quadratic_kernel.cl quadratic_kernel.cl
	#echo -e "Threads defined: $2";


fi




src="documentation/"
DOC_IMAGE="cuda.jpg"
CODVECTOR_PATH="_Codificador"


echo -e "\nConfiguring ...";

cd ..
    
for dir in `ls "$src/"`
do
  if [ -d "$src/$dir" ]; then
    rm -r $src/$dir;
  fi
done

echo -e "Updating tree.out ...";
# Create tree output
#tree -o documentation/tree.out #>/dev/null 2>&1

echo -e "Generating documentation ...";
cd _Codificador/
#make docs >/dev/null 2>&1






echo -e "\nDone.\n";
